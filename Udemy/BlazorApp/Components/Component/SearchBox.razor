@using System.Timers
@implements IDisposable

@* 페이지 지시문 없이 만들어지는 컴포넌트 == 다른 컴포넌트들의 자식 컴포넌트가 될 수 있음 *@
<div class="search">
	<i class="bi bi-eye-fill"></i>
	<input placeholder="Search..." 
					@attributes="AdditionalAttributes" 
					@bind="@SearchQuery" 
					@bind:event="oninput" />
	<input type="button" value="Search" @onclick="Search" />
</div>

<hr/>
자식 : @searchQuery

@code {
	private string searchQuery;
	private Timer debounceTimer;

	public string SearchQuery
	{
		get => searchQuery;
		set
		{
			searchQuery = value;
			debounceTimer.Stop();	// 타이머 중지
			debounceTimer.Start();	// 새로운 값이 할당되면 타이머 시작
			// 입력이 발생할 때마다 타이머가 중지되고 다시 시작되어, 일정시간이 경과한 후에 작업 실행됨
		}
	}
	/* 컴포넌트에서 명시적으로 선언하지 않은 추가 속성을 캡처하고 저장
		주로 컴포넌트에 추가적인 HTML 속성을 전달하고자 할 때 사용 */
	[Parameter(CaptureUnmatchedValues = true)] 
	public IDictionary<string, object> AdditionalAttributes { get; set; }

	// 자식 컴포넌트에서 발생한 정보를 부모 컴포넌트에게 전달
	[Parameter]
	public EventCallback<string> SearchQueryChanged { get; set; }

	[Parameter]
	public int Debounce { get; set; } = 300;
	// 디바운싱은 입력 값이 변경될 때마다 
	// 지정된 시간(Debounce 속성에 설정된 값)동안 대기한 후에 이벤트를 발생시키는 기술
	protected override void OnInitialized()
	{
		debounceTimer = new Timer();
		debounceTimer.Interval = Debounce;  // 타이머의 간격 설정
		debounceTimer.AutoReset = false;        // 타이머가 한 번만 실행
		debounceTimer.Elapsed += SearchHandler;  // 타이머의 이벤트 핸들러를 설정(타이머가 경과할 때마다 호출)
	}

	protected void Search()
	{
		SearchQueryChanged.InvokeAsync(SearchQuery);   // 부모의 메서드에 검색어를 전달
	}

	protected async void SearchHandler(object source, ElapsedEventArgs e)
	{
		await InvokeAsync(() => SearchQueryChanged.InvokeAsync(SearchQuery)); // 부모의 메서드에 검색어 전달
	}

	public void Dispose()
	{
		debounceTimer.Dispose(); // 타이머 소멸	
	}
}
